#!/usr/bin/env node

// cat a.log | node awkj.js 'console.log($1, $2, $3)'

function processInput(eachLine, end) {
  let stdin = process.stdin;
  stdin.setEncoding('utf8');
  let line = '';
  stdin.on('end', ()=>{ line&&eachLine(line); end()});
  stdin.on('readable', () => {
    let l = stdin.read();
    line = line + (l||'');
    let lines = line.split('\n');
    line = lines.pop() || ''; // save not complete line
    lines.filter(f=>f).forEach(eachLine);
  });
}

function getArgs() {
  let cur = 2;
  let sep = /\s/;
  if (process.argv[cur] == '-F') {
    sep = process.argv[cur+1];
    cur +=2;
  }
  return {sep, cont:process.argv[cur]};
}

function main() {
  let {sep, cont} = getArgs();
  if (!cont || cont[0] == '-') {
    return console.log('please input function content. current content:', cont);
  }
  let G={NR:0}; // for global operation
  let [body, end] = cont.split('END');
  processInput(line=>{
    G.NR ++;
    let fs = line.split(sep);
    let obj = {FS:fs.length, $0:line, G, NR:G.NR};
    fs.forEach((e,i)=>obj['$'+(i+1)] = e);
    G.func = G.func || eval(`obj=>{
                let {${Object.keys(obj).join(',')}, ${Array(100-fs.length).fill(0,0,100).map((e,k)=>`$${k+1+fs.length}`).join(',')}} = obj;
                ${body}
            }`);
    G.func(obj);
  }, ()=>{
    end && eval(`obj=>{let {NR,G}=obj;${end}}`)({NR:G.NR,G});
  });
}

main();
